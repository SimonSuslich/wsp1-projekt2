<head>
    <link rel="stylesheet" href="/css/show.css?<%=Time.now.to_i%>">
</head>


<section class="view-product">
    <div class="product-gallery">
        <div class="main-image">
            <button class="nav-button prev" onclick="prevImage()">&#10094;</button>
            <div class="image-container">
                <img id="currentImage" src="<%= @product['image_paths'].first %>" alt="Main product image">
            </div>
            <button class="nav-button next" onclick="nextImage()">&#10095;</button>
        </div>
        <div class="thumbnail-container-wrapper">
            <button class="thumbnail-nav prev" onclick="scrollThumbnails(-1)">&#10094;</button>
            <div class="thumbnail-container">

                <% @product['image_paths'].each_with_index do |image, i| %>
                    <img class="thumbnail" src="<%= image %>"
                        onclick="changeImage('<%= image %>', <%= i %>)" alt="Thumbnail 1">
                    <!-- Add more thumbnails as needed -->
                <% end %>

            </div>
            <button class="thumbnail-nav next" onclick="scrollThumbnails(1)">&#10095;</button>
        </div>
    </div>


    <div class="product-info-container">

        <div class="quick-info-container">
            <p class="title"><%= @product["title"]%></p>
            <p class="price"><%= @product[:formated_price]%> SEK</p>
        </div>

        <div class="overview-container">
            <p class="overview">Overview</p>
            <ul class="info-container">
                <% @product[:basic_info].each do |info| %>
                    <li>
                        <p class="label"><%= info[:header]%></p>
                        <p class="info"><%= info[:value]%></p>
                    </li>
                <% end %>
            </ul>
        </div>

        <div class="purchase-controlls">
            <a class="btn-2" href="/cart/<%=@product['id']%>/new">
                Put into cart
                <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'>
                    <path
                        d="M21 4H2v2h2.3l3.28 9a3 3 0 0 0 2.82 2H19v-2h-8.6a1 1 0 0 1-.94-.66L9 13h9.28a2 2 0 0 0 1.92-1.45L22 5.27A1 1 0 0 0 21.27 4 .84.84 0 0 0 21 4zm-2.75 7h-10L6.43 6h13.24z">
                    </path>
                    <circle cx="10.5" cy="19.5" r="1.5"></circle>
                    <circle cx="16.5" cy="19.5" r="1.5"></circle>
                </svg>
            </a>
            <button class="btn-2">
                Contact dealer
                <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'>
                    <path
                        d="M12 2a5 5 0 1 0 5 5 5 5 0 0 0-5-5zm0 8a3 3 0 1 1 3-3 3 3 0 0 1-3 3zm9 11v-1a7 7 0 0 0-7-7h-4a7 7 0 0 0-7 7v1h2v-1a5 5 0 0 1 5-5h4a5 5 0 0 1 5 5v1z">
                    </path>
                </svg>
            </button>
        </div>
    </div>

    <div class="product-description-container">
        <h3>Description</h3>
        <p class="description-short description-paragraph"></p>
        <p class="description description-paragraph">
            <%= @product['description']%>
        </p>

        <div class="description-buttons-container">
            <button class="description-button show-less" onclick="descriptionToggle()">
                Show less
            </button>

            <button class="description-button show-more" onclick="descriptionToggle()">
                Show more
            </button>
        </div>


    </div>


</section>
<script>
    // Array of image URLs
    const images = <%= @product['image_paths']%>;
    let currentIndex = 0;

    // Function to change the main image
    function changeImage(imageUrl, index) {
        const currentImage = document.getElementById("currentImage");
        currentImage.classList.add("fade-out"); // Add fade-out effect


        setTimeout(() => {
            currentImage.src = imageUrl;
            currentImage.classList.remove("fade-out");
        }, 150); // Match the transition duration in CSS

        currentIndex = index;
    }

    // Function to show the next image
    function nextImage() {
        currentIndex = (currentIndex + 1) % images.length; // Loop to the start
        changeImage(images[currentIndex], currentIndex);
    }

    // Function to show the previous image
    function prevImage() {
        currentIndex = (currentIndex - 1 + images.length) % images.length; // Loop to the end
        changeImage(images[currentIndex], currentIndex);
    }

    // Function to scroll the thumbnail container
    function scrollThumbnails(direction) {
        const container = document.querySelector(".thumbnail-container");
        const scrollAmount = 500; // Adjust scrolling amount as needed
        container.scrollLeft += direction * scrollAmount; // Scroll left or right
    }




    const descriptionLength = document.querySelector(".description").textContent.length;
    const descriptionElement = document.querySelector(".description");
    const descriptionShortElement = document.querySelector(".description-short");
    descriptionShortElement.classList.add("content-hidden");
    descriptionShortElement.textContent = descriptionElement.textContent.slice(0, 500);
    descriptionShortElement.textContent += "...";
    const descriptionControlls = document.querySelector(".description-buttons-container")
    let descriptionRevealed = false;
    const showMoreDescription = document.querySelector(".show-more");
    const showLessDescription = document.querySelector(".show-less");
    showLessDescription.classList.add("content-hidden")

    if (descriptionLength < 500) {
        descriptionControlls.classList.add("content-hidden");
        console.log("Hey");
    } else {
        descriptionToggle();
    }



    function descriptionToggle() {
        if (descriptionRevealed) {
            showLessDescription.classList.remove("content-hidden");
            showMoreDescription.classList.add("content-hidden");
            descriptionElement.classList.remove("content-hidden");
            descriptionShortElement.classList.add("content-hidden");
        } else {
            showMoreDescription.classList.remove("content-hidden");
            showLessDescription.classList.add("content-hidden");
            descriptionElement.classList.add("content-hidden");
            descriptionShortElement.classList.remove("content-hidden");
        }
        descriptionRevealed = !descriptionRevealed

    }

</script>