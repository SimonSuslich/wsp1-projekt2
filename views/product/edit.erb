<head>
    <link rel="stylesheet" href="/css/add_new_product.css?<%=Time.now.to_i%>">
</head>

<div class="add_new_product_container">
    <h1>Edit product</h1>

    <form action="/products/<%=@product['id']%>/update" method="post" enctype="multipart/form-data" onsubmit="prepareFiles(event)" class="add-new-product">

        <%@product.each do |key, value|%>
            <%banned_key = ['image_paths', :basic_info, :formated_price, 'id']%>
            <%if !banned_key.include?(key)%>
                <div class="part">
                    <label><%=pretty_print_key(key)%></label>
                    <%if key == 'description' %>
                        <textarea class="textarea" name="description" rows="5"><%=value%></textarea>
                    <% else %>
                        <input type="text" name="<%=key%>" value="<%=value%>"> 
                    <% end %>
                </div>
            <%end%>
        <%end%>



        <div class="part upload-images-part">
            <label for="images-input" class="btn-1 btn-color">Choose images</label>
            <input type="file" id="images-input" accept="image/*" multiple style="display: none;">
            <input type="hidden" name="images" id="image-names">

            <button type="button" class="btn-1 btn-color" onclick="removeAllImages()">Clear Images</button>

            <div class="image-preview-container" id="imagePreviewContainer">


            </div>

        </div>


        <!-- Submit Button -->
        <input type="submit" value="Submit" class="btn-1 btn-submit btn-color">
    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.2/Sortable.min.js"></script>

<script>
    


    const inputImages = document.getElementById("images-input");
    let imagesPreviewContainer = document.getElementById("imagePreviewContainer");

    let imagesArray = [];
    let imagesOrder = [];
    let idCounter = 0;

    let oldImages = <%= @product['image_paths']%>
    oldImages.forEach(img => {
        const imageName = img.split("/").pop().split("_").slice(1).join("_");
        addPreviewImage(img, imageName);
        imagesOrder.push([imageName, idCounter]);
        idCounter++;
    });

    inputImages.onchange = function(event) {
        const files = Array.from(event.target.files);


        imagesArray.push(...files);
        files.forEach((file, index) => {
            imagesOrder.push([file.name, idCounter]);

            const previewDiv = document.createElement('div');
            previewDiv.classList.add('image-preview');

            const img = document.createElement('img');
            img.classList.add('draggable');
            img.src = URL.createObjectURL(file);
            img.alt = file.name;

            const deleteButton = document.createElement('button');
            deleteButton.id = idCounter;
            idCounter++;
            deleteButton.classList.add('delete-btn');
            deleteButton.innerHTML = `
                <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='#000000' width='24' height='24'>
                    <path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path>
                    <path d="M9 10h2v8H9zm4 0h2v8h-2z"></path>
                </svg>
            `;

            deleteButton.onclick = () => {
                imagesArray.splice(index, 1);
                imagesOrder = imagesOrder.filter(item => Number(item[1]) !== Number(deleteButton.id));
                previewDiv.remove();
                console.log(imagesOrder);
            };

            previewDiv.appendChild(img);
            previewDiv.appendChild(deleteButton);
            imagesPreviewContainer.appendChild(previewDiv);
        });
    }

    function addPreviewImage(imgSrc, imgName) {
        const previewDiv = document.createElement('div');
        previewDiv.classList.add('image-preview');

        const img = document.createElement('img');
        img.classList.add('draggable');
        img.src = imgSrc;
        img.alt = imgName;

        const deleteButton = document.createElement('button');
        deleteButton.classList.add('delete-btn');
        deleteButton.innerHTML = `
            <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='#000000' width='24' height='24'>
                <path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path>
                <path d="M9 10h2v8H9zm4 0h2v8h-2z"></path>
            </svg> 
        `;

        deleteButton.id = idCounter;
        deleteButton.onclick = () => {
            imagesOrder = imagesOrder.filter(item => Number(item[1]) !== Number(deleteButton.id));
            previewDiv.remove();
            console.log(imagesOrder);
        };

        previewDiv.appendChild(img);
        previewDiv.appendChild(deleteButton);
        imagesPreviewContainer.appendChild(previewDiv);
    }



    function removeAllImages() {
        const previewContainer = document.getElementById('imagePreviewContainer');
        previewContainer.innerHTML = '';
        imagesArray = [];
        imagesOrder = [];
    }


    function prepareFiles(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);

        // Append image order as a comma-separated string
        formData.set("images_order", imagesOrder.join(",")); 

        // Clear previous "new_images" entries by ensuring nothing is pre-existing
        formData.delete("new_images[]"); 

        // Append all images from imagesArray
        imagesArray.forEach((file) => {
            formData.append("new_images[]", file);
        });

        // Submit the form using fetch
        fetch(form.action, {
            method: form.method,
            body: formData
        }).then(response => {
            if (response.ok) {
                window.location.href = response.url; // Redirect on success
            } else {
                console.error("Form submission failed");
            }
        }).catch(error => console.error("Error:", error));
    }




    new Sortable(imagesPreviewContainer, {
        animation: 150,
        onEnd: function (event) {
            // Reorder the imagesArray based on the new order in the container
            imagesOrder = [...imagesPreviewContainer.children].map((div) => {
                return [div.querySelector('img').alt, div.querySelector('button').id];
            });

            console.log("Updated Array:", imagesOrder); // Show the updated order
            imagesArray.sort((a, b) => {
                // Find the first occurrence of a.name and b.name in imagesOrder
                const indexA = imagesOrder.findIndex(([name, _]) => name === a.name);
                const indexB = imagesOrder.findIndex(([name, _]) => name === b.name);

                return indexA - indexB; // Sort based on their first appearance in imagesOrder
            });
        }
    });

</script>